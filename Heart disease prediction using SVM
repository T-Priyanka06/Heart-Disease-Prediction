# Start importing the required libraries
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

# Pretty display for notebooks
%matplotlib inline

# Upload data file into dataframe df
df = pd.read_csv("../input/cardio-data-dv13032020/cardiovascular_diseases_dv3.csv", sep=';')
df.info()
df.head()
print(format(df.duplicated().sum())) # 3820 duplicates???

# Explore duplicates
duplicated = df[df.duplicated(keep=False)]
duplicated = duplicated.sort_values(by=['AGE', 'GENDER', 'HEIGHT'], ascending= False) 

# I sorted the values to see duplication clearly
duplicated.head(6) # Show 3 duplicate pairs

# Drop duplicates
df.drop_duplicates(inplace=True)
print(format(df.duplicated().sum())) # now 0 duplicates???
df.describe() # There are no negative values, nore ridiculous out of scale value

# Distributions of age, height and weight variables
fig, axes = plt.subplots(1,3, figsize=(18,4))
sns.distplot(df.AGE, bins=10, kde=True, ax=axes[0])
sns.distplot(df.HEIGHT, bins=10, kde=True, ax=axes[1])
sns.distplot(df.WEIGHT, bins=10, kde=True, ax=axes[2])

correlation = df.corr()

plt.figure(figsize=(12, 10))
heatmap = sns.heatmap(correlation, annot=True, linewidths=0, vmin=-1, cmap="RdBu_r"

# Feature Scaling, required by SVM and KNN algorithms
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Import SVM classification model from sklearn
from sklearn.svm import SVC
SV_classifier = SVC(kernel='linear')
SV_classifier.fit(X_train, y_train)
y_predicted = SV_classifier.predict(X_test)
y_predicted

# Evaluate the model
print("------------------------------------------------------") 
print("Confussion Matrix")
print("------------------------------------------------------")
print(confusion_matrix(y_test,y_predicted))
print("------------------------------------------------------")
print("Classification Report")
print("------------------------------------------------------")
print(classification_report(y_test,y_predicted))
print("------------------------------------------------------")
SV_accuracy = round(accuracy_score(y_test, y_predicted), 2)
print("Overall accuracy score: " + str(SV_accuracy))
print("------------------------------------------------------")
